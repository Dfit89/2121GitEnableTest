<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>[%=Heading.AnyLevel%]</title>
        <meta name="description" content="Stibo SDQ Admin Guide: Asynchronous validation allows users to coordinate data with the database in a set fashion." />
    </head>
    <body>
        <h1>Async Validation</h1>
        <p>To take full advantage of the data quality functionality, Data Quality Mappings with enabled (Web-to-Object) flag are highly recommended, and all of the validation triggers must be present and active. Select the checkbox when mapping fields.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/EnablingAsync.png" />
        </p>
        <p>Validation will be performed on:</p>
        <ul>
            <li>Record Creation, if a value is entered for a field which is configured in a Data Quality mapping, and the Validation Status and Validation Timestamp fields are empty.</li>
        </ul>
        <ul>
            <li>Record Modification, if a value is modified for a field which is configured in a Data Quality mapping, or if any modification is made to the object and there is a field which is configured in a Data Quality mapping.</li>
        </ul>
        <p class="note1" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">
            <br />This is an asynchronous process and might take some time to be performed after record saving. If a value is modified for a field which is configured in a Data Quality mapping and the validation triggers are present then, before the actual update of the record, Validation Status and Validation Timestamp fieldsâ€™ values will be set to empty regardless of if you have Async Validation (Web-to-Object) enabled. Then, only if you have Async Validation (Web-to-Object) enabled, after a short delay, validation will be performed and the record will be updated with relevant data which is configured in the output section of the Data Quality mapping.
			<br /><br />        	Validation will NOT be performed if the user is creating a record through Search Before Create functionality and validation has already been performed on the initial screen.
		</p>
        <MadCap:pageBreak MadCap:conditions="Primary.Print" />
        <p class="Body1HeadNoTOC">Account Validation Triggers</p>
        <p class="Body1">Before any input can be validated, triggers must be configured. To configure triggers for the Account object:</p>
        <p class="Body1">Navigate to Setup &gt; Object Manager &gt; Accounts &gt; <b>Triggers</b>.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/TriggerNavigation.png" />
        </p>
        <MadCap:pageBreak MadCap:conditions="Primary.Print" />
        <p>The Apex Trigger editing page will load. In the Apex Trigger field, enter the following code snippet:</p><pre>trigger StiboAccountValidationStatus on Account (before insert, before update) {</pre><pre xml:space="preserve">	if (Trigger.isInsert) {</pre><pre xml:space="preserve">		stibo_dq.ValidatorTriggerService.prepareSObjects(Trigger.new);</pre><pre xml:space="preserve">	} else if (Trigger.isUpdate) {</pre><pre xml:space="preserve">		stibo_dq.ValidatorTriggerService.prepareSObjects(Trigger.new, Trigger.oldMap);</pre><pre xml:space="preserve">	}</pre><pre xml:space="preserve">}</pre>
        <p>Select 'Save,' and navigate back to the Object Manager &gt; Account &gt; <b>Triggers</b> page. Create another new trigger with the following code:</p><pre>trigger StiboAccountAsyncValidation on Account (after insert, after update) {</pre><pre xml:space="preserve">	stibo_dq.ValidatorTriggerService.validateSobjects(Trigger.new);</pre><pre>}</pre>
        <p class="Body1">Save the trigger.</p>
        <p class="Body1HeadNoTOC">Contact Validation Triggers</p>
        <p class="Body1">Before any input can be validated, triggers must be configured. To configure triggers for the Account object:</p>
        <p class="Body1">Navigate to Setup &gt; Object Manager &gt; Contact &gt; <b>Triggers</b>.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/ContactTriggerNavigation.png" />
        </p>
        <MadCap:pageBreak MadCap:conditions="Primary.Print" />
        <p>The Apex Trigger editing page will load. In the Apex Trigger field, enter the following code snippet:</p><pre>trigger StiboContactValidationStatus on Contact (before insert, before update) {</pre><pre xml:space="preserve">	if (Trigger.isInsert) {</pre><pre xml:space="preserve">		stibo_dq.ValidatorTriggerService.prepareSObjects(Trigger.new);</pre><pre xml:space="preserve">	} else if (Trigger.isUpdate) {</pre><pre xml:space="preserve">		stibo_dq.ValidatorTriggerService.prepareSObjects(Trigger.new, Trigger.oldMap);</pre><pre xml:space="preserve">	}</pre><pre>}</pre>
        <p>Select 'Save,' and navigate back to the Object Manager &gt; Contact &gt; <b>Triggers</b> page. Create another new trigger with the following code:</p><pre>trigger StiboContactAsyncValidation on Contact (after insert, after update) {</pre><pre xml:space="preserve">	stibo_dq.ValidatorTriggerService.validateSobjects(Trigger.new);</pre><pre>}</pre>
        <p class="Body1">Save the trigger.</p>
        <h2>Scheduling a Task Synchronizer</h2>
        <p class="Body1">To see and review Clerical review tasks in Stibo SDQ, the Task Synchronizer must be started and scheduled. This process is done in the Developer's Console.</p>
        <p class="note1" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The Developer's Console is most easily accessible from the Classic Experience. This section will be done in that view.</p>
        <p class="Body1">In Salesforce, open the Developer's Console by selecting the user name dropdown, then selecting 'Developer Console.'</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/SelectDevelopersConsole.png" />
        </p>
        <p class="Body1">In the Developer Console, select Debug &gt; <b>Open Execute Anonymous Window</b>.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/OpenExecutionWindow.png" />
        </p>
        <p class="Body1">Enter the following string, modifying minutes and hour to the desired time. In the following example, the time will run at 5:30PM, local user time:</p><pre>String minutes = '30';</pre><pre>String hour = '17';</pre><pre>System.schedule('StepTaskSynchronizer', '0 ' + minutes + ' ' + hour + ' * * ?', new stibo_dq.TaskSyncScheduler());</pre>
        <p class="Body1">Select 'Execute' to run the code. Note, that if there is other text in the console, you can highlight the above code then select the 'Execute Highlighted' to only run that selected code.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/ExecuteApex.png" />
        </p>
        <p class="Body1">To check the scheduled jobs, go to Setup &gt; <b>Scheduled Jobs</b>. These can be unscheduled by deleting it from the UI.</p>
        <p class="Body1Image">
            <img src="../../../../Resources/Images/CMDM/AdminGuide/ScheduledJobsUI.png" />
        </p>
        <p>Linking functionality requires using a custom object that links two Standard Salesforce object (Account or Contact). The two linked objects in Salesforce are called 'Master' and 'Lookup'. When a Master object is deleted the custom link object is deleted as well, but when a Lookup object is deleted, the link custom object is not deleted. This is a Salesforce limitation, and it can lead to 'orphans'.</p>
        <p>To schedule an orphan cleaning task, run the following command in Development console:</p><pre>System.schedule('OrphanLinkCleanupScheduler', '0 0 0 * * ? *', new OrphanLinkCleanupScheduler());</pre>
        <p>This Schedule job will run every 24 hours at 12:00 pm, making sure all of the linking orphans are cleaned up.</p>
    </body>
</html>