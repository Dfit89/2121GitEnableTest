<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Primary.Done">
    <head><title>PMDM for Automotive 8.3 MP1 March 2018 Maintenance Patch Notes</title>
        <meta name="description" content="Automotive Solution: PMDM for Automotive 8.3 MP1 Patch Notes" />
    </head>
    <body>
        <h1 class="MPN">PMDM for Automotive 8.3 MP1 Patch Notes</h1>
        <h2 class="MPN">Release Date: March 29, 2018</h2>
        <h2 class="MPNNewFeatures">New Features</h2>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDUCST- </MadCap:conditionalText>New Application Manager</p>
        <p class="Body3">With PMDM for Automotive 8.3 MP1, we are excited to introduce the new Application Manager. It is faster and easier to use than its predecessor, Application Editor. Application Manager allows Web UI users to search, view, create, edit, and delete part application data. Users can also export reports to Excel using the new Application Coverage Report button, and manage interchange data using improved features within the results table. For more information, see the <b>Application Manager</b> topic<MadCap:conditionalText MadCap:conditions="Primary.Web"><MadCap:xref href="../../Reference Guide/Application Manager/Application Manager.htm" class="HereWithParens"> (<span style="color: Blue;" class="mcFormatColor">here</span>)</MadCap:xref></MadCap:conditionalText> within the <b>Automotive Reference Guide</b>.</p>
        <p class="Image1" MadCap:conditions="Primary.Print">
            <img src="../../Resources/Images/MPNotes/Application Manager Page.png" />
        </p>
        <p class="Image3" MadCap:conditions="Primary.Web">
            <img src="../../Resources/Images/MPNotes/Application Manager Page.png" />
        </p>
        <p MadCap:conditions="Primary.Print">&#160;</p>
        <p MadCap:conditions="Primary.Print" class="Body1">&#160;</p>
        <p class="MPNHeadNoTOC">Improved accuracy when searching for missing applications</p>
        <p class="Body3">Missing Coverage accuracy has been improved by taking both the Condition and Part Type values into consideration. </p>
        <p class="Body3">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDUCST-2732 2713</MadCap:conditionalText>Previously, when searching for missing applications within the Application Manager, conditions for specific part types were not considered, resulting in the display of invalid missing application records. For example, when searching for spark plugs for a 2013 Audi A3, the results table would list both Gas and Diesel engines, even though Diesel engines do not use spark plugs, and are invalid in the search results. Now, we have improved the missing application search by introducing a Business Condition plugin ('Check path for missing application') where a validation path can be configured so that the invalid missing applications for a specific part type are filtered away, and only valid values are returned.</p>
        <p class="Body3" MadCap:conditions="Primary.Under Construction">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDCUST-2713 This portion removed and replaced with the above per NIFE </MadCap:conditionalText>Additionally, our previous application data model did not include any information to indicate that certain part types are never needed for certain vehicles, and as a result the Application Manager could display missing applications erroneously. Now, we have improved the application data model to include a relationship between conditions on applications and different configurations of vehicles. This allows the Application Manager to search for applications with conditions for all sub models. For example, when searching for spark plugs for a 2013 Audi A3, the result table will list both Gas and Diesel engines, since Diesel engines do not use spark plugs, this is inaccurate. When the new 'Missing Application Conditions' attribute is used in conjunction with the new '<MadCap:annotation MadCap:createDate="2018-02-27T11:30:50.6407378-05:00" MadCap:creator="medu" MadCap:initials="MEDU" MadCap:comment="Need to document the new BC" MadCap:editor="medu" MadCap:editDate="2018-03-01T09:16:43.1218265-05:00">Check path for missing application</MadCap:annotation>' business condition, and a validation path, the results will not display the inaccurate option.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDUCST-2734, 2738,2812, 2811 </MadCap:conditionalText>New Application Coverage Report </p>
        <p class="Body3">Within the new Application Manager, you will find the new Application Coverage Report that allows users to export missing and/or existing application data into an Excel spreadsheet (XLSX file type). The Application Coverage Report includes the same column headings found in the search results table, therefore the Web UI designer can be used to easily add or remove the display of columns. Once the 'Report' button is clicked, a background process is initiated, and a notification displays informing users of the linked background process ID, and that the process has started. For more information, see the new <b>Application Manager Application Coverage Report </b>topic<MadCap:xref href="../../Reference Guide/Application Manager/Application Coverage Report.htm" class="Here" MadCap:conditions="Primary.Web"><span style="color: Blue;" class="mcFormatColor"> here</span></MadCap:xref>.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2204 2205 </MadCap:conditionalText>Improved how users add, delete, and edit AutoCare qualifiers in  Application Manager</p>
        <p class="Body3">Improvements have been made allowing users to easily add, delete, and/or edit AutoCare qualifiers within the Application Manager results table. Previously, users could only view Qualifiers in the results table. Now, when the results table is populated, users can navigate to a cell within the Qualifiers column and either double click with their mouse pointer (or click the Enter key on their keyboard) to display the Value editor. Within the Value editor, the 'Add Qualifier...' link can be clicked to display a 'Select qualifier' dialog, where users can browse or search for the necessary Qualifier, and then click the OK button to save the selection.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2768 </MadCap:conditionalText>Updated VCdb importer to better handle model IDs</p>
        <p class="Body3">Previously, the VCdb importer would create the Model ID without considering the Make. This was an issue for those Model Names that occur across multiple Makes, because it resulted in the Models for multiple makes being referenced to one make classification folder. </p>
        <p class="Body3">For example, the 200 Model is offered by many different manufacturers (i.e., Audi, Chrysler, Griffith, Mercedes-Benz, Packard). Upon import, the Audi 200 would be created as a child classification folder beneath the Audi classification folder (since it was the first make with the 200 model listed within the import). Then, when the Chrysler 200 was processed, it would erroneously be added to the Audi 200 classification folder. </p>
        <p class="Body3">Now, the importer considers the make in the Model ID structure, and the Model Names that occur across multiple makes are properly created within their own make classification folder. </p>
        <p class="Body3">The new Model ID structure is: AC_Model_[MakeID_[ModelID]. For example, the Chrysler 200 Model ID = AC_Model_39_975.</p>
        <p class="Body3"><b>Existing Implementations</b>: Complete the steps below.</p>
        <ol>
            <li class="Bullet3">If existing classification references to VCdb objects exist, then export those.</li>
            <li class="Bullet3">Manually delete the VCdb structure.</li>
            <li class="Bullet3">Import the VCdb file so that the Model objects are created using the new ID structure. </li>
            <li class="Bullet3">If existing classifications were exported in step 1 above, be sure to import them now.</li>
        </ol>
        <p class="note2" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Because there are no references linked directly to the Model objects (only to Base Vehicle children and Vehicle objects), those IDs will remain the same.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: MEDU RDCUST-2724 </MadCap:conditionalText>New 'VCdb Year' attribute for the VCdb importer</p>
        <p class="Body3">Now AutoCare Easy Setup creates a new attribute 'VCdb Year' (AC_VCdbYear). This attribute allows the year data for the AutoCare base vehicles to be set by populating 'VCdb Year' (AC_VCdbYear) attribute with data from the VCdb import.</p>
        <p class="Body3">This update is part of Easy Setup via <b style="font-weight: normal;">Automotive - AutoCare Model &gt; 1. Configure AutoCare Data Model.</b></p>
        <p class="Body3"><b>Existing Implementations</b>: Run the AutoCare Easy Setup step 1 'Configure AutoCare Data Model' to automatically create the new attribute, and automatically make it valid for the Base Vehicle classification object type. </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: MEDU RDCUST-2073 </MadCap:conditionalText>Updated PAdb Importer to handle hierarchical LOV filtering</p>
        <p class="Body3">Previously, the PAdb import did not include hierarchical LOV filtering. Now, once a PAdb import is run, the attributes are created, and linked to the appropriate part terminology classifications. This allows for the available LOV values to be filtered based on the part type that the attribute references. </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2222 </MadCap:conditionalText>Updated PAdb Importer to set the PADescr value as the attribute help text metadata for the part</p>
        <p class="Body3">Previously, when a PAdb file was imported, the Part Attribute Description [PADescr] within the PartAttributes.txt file was ignored. Now, when a PAdb file is imported, the values found within the 'PADescr' parameter are set as the respective part's attribute help text [AttributeHelpText], as shown <MadCap:annotation MadCap:createDate="2018-03-23T10:36:27.2387912-04:00" MadCap:creator="jopi" MadCap:initials="JOPI" MadCap:comment="TO BOND: that's not our typical red arrow in the image below\r\nnor do we use highlighting -- rather the red box" MadCap:editor="jopi" MadCap:editDate="2019-02-07T11:13:21.4350640-05:00">below</MadCap:annotation>. </p>
        <p class="Image1" MadCap:conditions="Primary.Print">
            <img src="../../Resources/Images/MPNotes/1.png" />
        </p>
        <p class="Image3" MadCap:conditions="Primary.Web">
            <img src="../../Resources/Images/MPNotes/1.png" />
        </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: MEDU RDCUST-2722</MadCap:conditionalText>Updated PIES Exporter with mandatory field validation</p>
        <p class="Body3">Previously, when using the Export Manager to create a PIES export, it was possible to create an export without the required information. Because no mandatory field validations were in the Export Wizard, the export would be allowed to complete successfully even though the content in the delivered file would eventually fail PIES XSD validation when the file is used to by the importer. </p>
        <p class="Body3">Now, the Export Manager will only enable the 'Next' and  'Finish' buttons when all the mandatory fields are populated, and at least one of the Brand Owner DUNS or GLN fields are populated with the correct number of characters. The 'Brand Owner DUNS' value must be between  9 and 13 digits; whereas the 'Brand Owner GLN' value must have 13 digits. Additionally, the required fields will display a red fill until the correct number of characters have been entered.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: MEDU RDCUST-2007 </MadCap:conditionalText> Improved ACES Importer and Exporter to handle the order of multiple Notes / Comments</p>
        <p class="Body3">It is common for applications to have more than one Note / Comment, and for the output order of these comments to matter. To handle this, the metadata attribute (DisplaySequence) is now made valid for the necessary reference (AC_ACESApplicationToApplicationNote) during the Easy Setup steps. The ACES Importer now reads the order of the Notes / Comments, and applies the corresponding number to the Display Sequence metadata attribute on the reference between the application record and the comment. Additionally, the ACES Exporter now inserts the Notes / Comments in the order indicated. </p>
        <p class="Body3">In the example below, the ACES XML file is shown above the workbench. Since the 'OE Quality' Note is listed  before the '80c Mounts in Radiator for Trans Oil Cooler' Note within the XML file, the 'OE Quality' Target object is listed with a Display Sequence of '1,' and  the '80c Mounts in Radiator for Trans Oil Cooler' Note with a Display Sequence of '2' within the ACES Application To Application Note Reference Type within the workbench.</p>
        <p class="Image2" MadCap:conditions="Primary.Print">
            <img src="../../Resources/Images/MPNotes/ACESNotesOrder.png" />
        </p>
        <p class="Image3" MadCap:conditions="Primary.Web">
            <img src="../../Resources/Images/MPNotes/ACESNotesOrder.png" />
        </p>
        <p class="Body3"><b>Existing Implementations</b>:  Run the AutoCare Easy Setup step 1. Configure AutoCare Data Model to automatically update the metadata attribute Display Sequence (DisplaySequence) validity.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDUCST-2316 </MadCap:conditionalText>Added XSD validation to PIES&#160;and ACES&#160;Exporters </p>
        <p class="Body3">Previously, the PIES and ACES Exporters did not contain any XSD validation against the PIES and ACES specifications, so a file would be exported even if required data was missing. For example, for PIES packaging dimensions, if Height value was missing, the part would still be exported with the Length and Width values, even though  Height is required. If the same exported file was imported into STEP, it would fail validation because the Height value was missing.</p>
        <p class="Body3">Now, the PIES and ACES Exporters validate against the PIES and ACES&#160;XSD. When errors do occur, they are listed in the Background Process Execution report. To accomplish this, a new parameter (Deliver a file if there are validation errors?) has been added to the PIES and ACES export wizards. The parameter defaults to 'no.' </p>
        <p class="Body3">When the parameter is set to 'no,' the following will occur:</p>
        <ul>
            <li class="Bullet3">If XSD validation errors are encountered in the export, then the errors are listed in the Background Process Execution Report. The errors will include the ID of the object that failed XSD validation and which requirement it failed on.</li>
            <li class="Bullet3">A file will not get delivered with objects that meets XSD validation.</li>
            <li class="Bullet3">The Background Process will have a status of 'failed.'</li>
        </ul>
        <p class="Body3">When the parameter is set to 'yes,' the following will occur:</p>
        <ul>
            <li class="Bullet3">If XSD validation errors are encountered in the export, then the errors are listed in the Background Process Execution Report. The errors will include the ID of the object that failed XSD validation and which requirement it failed on.</li>
            <li class="Bullet3">A file will get delivered with objects that meets XSD validation.</li>
            <li class="Bullet3">The Background Process will have a status of 'succeeded.'</li>
        </ul>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2799 </MadCap:conditionalText>Updated NAPA Easy Setup, Application Importer, and Application Exporter to properly handle the order of Comments</p>
        <p class="Body3">Previously, when more than one Comment existed for an application, the Comments would be displayed in alphabetical order when viewed in workbench, or brought into a table set up for print. Now, to define the display order for Comments based on the data that is provided in the application import file, the following changes have been made:</p>
        <ul>
            <li class="Bullet3">Updated Easy Setup action for Automotive - NAPA Model &gt; 1. Configure NAPA Data Model to make the Display Sequence (DisplaySequence) attribute valid for the NAPA_ApplicationToComment Product Reference Type, and the  NAPA Interchange Comment (NAPA_InterchangeComment) attribute valid for the NAPA_ProductToInterchangeProduct reference.</li>
            <li class="Bullet3">Updated NAPA Application Importer to assign a sequence number starting with '1' to Display Sequence (DisplaySequence) attribute on the Application To Comment reference based on the order that the comment is listed in the import file.</li>
            <li class="Bullet3">Updated NAPA Application Exporter to export the comments in the order stored in the Display Sequence (DisplaySequence) attribute on the product reference, rather than in the order stored in the database.</li>
            <li class="Bullet3"><b>Existing Implementations</b>: Run the  Easy Setup action for Automotive - NAPA Model &gt; 1. Configure NAPA Data Model or manually update the Display Sequence (DisplaySequence) attribute to be valid for the NAPA_ApplicationToComment Product Reference Type, and the  NAPA Interchange Comment (NAPA_InterchangeComment) attribute to be valid for the NAPA_ProductToInterchangeProduct reference.</li>
        </ul>
        <p MadCap:conditions="Primary.Print">&#160;</p>
        <p MadCap:conditions="Primary.Print">&#160;</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2814 </MadCap:conditionalText>Updated NAPA Easy Setup and NAPA&#160;Vehicle Importer to utilize the NAPA Year attribute with LOV validation</p>
        <p class="Body3">Previously the NAPA Year attribute was not required to use the LOV validation type. However, this caused problems within the Application Manager Year search box. The following changes have been made:</p>
        <ol>
            <li class="Numbered2">NAPA Easy Setup action creates a new LOV with the following configurations: ID = NAPA_YearLOV, Name = NAPA Year LOV, Validation Base Type = Number, Allow Users to Add Values = Yes, Mask = 9999.</li>
            <li class="Numbered2">NAPA Easy Setup action creates the NAPA&#160;Year (NAPA_Year) attribute with 'List Of Values' validation using the NAPA_YearLOV.</li>
            <li class="Numbered2">NAPA Vehicle Importer  applies the year value from the NapaValidVehicleMaster.txt file (field #6) to the NAPA Year (NAPA_Year) attribute on the NAPA Year (NAPA_Year) object type.</li>
        </ol>
        <p class="Body3"><b>Existing Implementations</b>: In order to avoid single update mode, the following needs to be done manually:</p>
        <ol>
            <li class="Numbered2">Run the Easy Setup actions for the NAPA&#160;standard.</li>
            <li class="Numbered2">Duplicate the existing NAPA Year (NAPA_Year) attribute, and give the new attribute the following: ID = NAPAYear2, Name = NAPA Year 2.</li>
            <li class="Numbered2">Make the NAPA Year 2 (NAPAYear2) attribute Externally Maintained, and change the Validation Base Type to List Of Values using the new NAPA_YearLOV.</li>
            <li class="Numbered2">Change Externally Maintained back to 'No.'</li>
            <li class="Numbered2">Run a bulk update to merge the values from NAPA_Year to NAPAYear2.</li>
            <li class="Numbered2">Switch IDs between the two attributes so that NAPA_Year now uses the LOV.</li>
            <li class="Numbered2">Force Delete the NAPAYear2 attribute that used to be the NAPA_Year with Number Validation Base Type.</li>
            <li class="Numbered2">Change the Name of NAPA Year 2 to NAPA Year.</li>
        </ol>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2699 </MadCap:conditionalText>Improved the display of the Web UI Title  during Easy Setup for each standard, and Login for each default Web UI</p>
        <p class="Body3">Previously when the step 2 Configure [standard] Import Process was selected, the confirmation dialog used the ID of the Web UI, instead of the Name, this made it difficult to read. Now Easy Setup uses the Name. In the example below, step 2 for the AutoCare standard has been selected, and the dialog displays an easy-to-read name of what is being created. </p>
        <p class="Image3">
            <img src="../../Resources/Images/AppMgr/AC2.png">
            </img>
        </p>
        <p class="Body3">Additionally, the Web UI  Login screen Web UI&#160;title parameter has been updated so that once the Web UI is created, the login prompt automatically displays with the following title: [Standard] Web UI. In the example below, the AutoCare Web UI login screen is displayed on the left using the value within the Web UI Title parameter found within the Web UI designer Login Screen Properties, displayed on the right.</p>
        <p class="Image2" MadCap:conditions="Primary.Print">
            <img src="../../Resources/Images/AppMgr/Web UI Login AutoCare.png">
            </img>
        </p>
        <p class="Image3" MadCap:conditions="Primary.Web">
            <img src="../../Resources/Images/AppMgr/Web UI Login AutoCare.png">
            </img>
        </p>
        <p class="Body3"><b>Existing implementations:</b> Please access the Web UI Title Parameter within each of your Web UIs and edit the parameter value accordingly.</p>
        <h2 class="MPNBugFix">Bugfixes</h2>
        <h3>All&#160;Standards</h3>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2819 </MadCap:conditionalText>Corrected Export Manager's display of parameters</p>
        <p class="Body3">Previously, when  step 3 of the Export Manager was configured to use an 'Excel' format, but later changed to a different format (i.e., AutoCare PIES 6.5 Exporter), the parameters displayed on step 5 were not updated to the newly selected format. Now, the Export Manager allows users to change the format selection on step 3 of the importer, and see the correct parameters on step 5.</p>
        <h3>AutoCare Standard</h3>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2781</MadCap:conditionalText>Corrected PIES Importer 'context' method</p>
        <p class="Body3">Previously, when the 'Delta calculation method' parameter in PIES import workflow was set to 'context,' and a PIES file included the &lt;PriceSheets&gt; segment containing attributes that do not exist in STEP, the import validation failed. Now the importer will create the new pricing attribute group and attributes, so that the importer can complete successfully. </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2751 </MadCap:conditionalText>Corrected PIES Importer interchange section</p>
        <p class="Body3">A missing tag was added to the PIES XML file to handle the error caused by the Interchange segment. </p>
        <p class="Body3"><b>HOTFIX:</b> A hotfix has been created to address this issue for the following versions only: step-8.2-mp3-2017-11-15-12-24-52 and automotive-7.0.6. The hotfix can be applied using the following recipe: </p><pre class="PreIndent" xml:space="preserve">to:hotfix/303/issue-303114-HOTFIX-2237.spr</pre>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2700 </MadCap:conditionalText>Corrected handling of PIES and ACES files that contain the same company name  </p>
        <p class="Body3">Previously, when ACES&#160;and PIES files had the same company name, upon import an error would occur causing the BGP to fail. This was caused by the ID Prefix for both importers being set to 'AC_.' This has been corrected by updating Easy Setup to set the ID Prefix for the AutoCare ACES&#160;IIEP to 'ACES,' and the AutoCare PIES IIEP to 'PIES.'</p>
        <p class="Body3"><b>Existing Implementations</b>: Existing AutoCare ACES and PIES IIEPs can be deleted, and Easy Setup can be used to create them with the appropriate ID&#160;Prefixes, or the following changes can be made manually. </p>
        <ol>
            <li class="Numbered2">Go to workbench &gt; System Setup &gt; Inbound Integration Endpoints &gt; Edit the <b>AutoCare ACES Inbound Endpoint </b>or the<b> AutoCare PIES Inbound Endpoint</b>.</li>
            <li class="Numbered2">Use the <b>Next</b> button to access step 5 'Configure Processing Engine.'</li>
            <li class="Numbered2">Within the ID Prefix parameter enter '<b>ACES</b>' or '<b>PIES</b>' for the respective IIEPs. <p><img src="../../Resources/Images/MPNotes/2700CorrectedACESandPIESPrefixID.png" /></p></li>
        </ol>
        <h3>NAPA Standard</h3>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2714</MadCap:conditionalText>Updated NAPA&#160;Easy Setup to  use the 'context' method when the workflows for the Application Importer and Interchange Importer are created</p>
        <p class="Body3">Previously, NAPA Application Import and Interchange Import workflows were set up to use the 'file' method. Because NAPA application and interchange files come from multiple sources, it is required that the files are imported using 'context' method for delta calculation so that the data is compared against the database instead of the previously imported file. Now, the NAPA Easy Setup action creates the importer workflows using the 'context' method.</p>
        <p class="Body3"><b>Existing Implementations</b>: Existing Application Import and Interchange Import workflows should be deleted. Then Easy Setup can be used to recreate them automatically with the appropriate delta calculation method, or the following changes can be made manually. </p>
        <ol>
            <li class="Numbered2">Go to workbench &gt; System Setup &gt; Workflows &gt; Edit the <b>NAPA Application Import workflow</b>.</li>
            <li class="Numbered2">Select the Delta Calculation state &gt; Right-click &gt; Select <b>Edit State</b>.</li>
            <li class="Numbered2">Select the 'On Entry' tab &gt; Click the <b>edit button</b> for the business action, and the Edit Operation dialog will display.</li>
            <li class="Numbered2">Populate the 'Delta calculation method' parameter with '<b>context</b>' (as shown below).</li>
            <li class="Numbered2">Click the <b>Save</b> button and close the Workflow Designer.</li>
            <li class="Numbered2">Repeat these steps for the <b>NAPA Interchange Import workflow</b>.<p><img src="../../Resources/Images/BRs/Delta calculation method context.png" /></p></li>
        </ol>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2727</MadCap:conditionalText>Updated Supplier Data Importer error message to better handle invalid LOVs</p>
        <p class="Body3">Previously, when an invalid LOV Value ID was supplied within the NAPA&#160;Interchange import, a vague error message displayed and did not include the invalid value ID. Now the error message displays with the invalid value ID. For example, when the 979 LOV value is invalid, the following error message displays: Error: The value for attribute 'NAPA_InterchangeComment' on reference 'NAPA_Product_UJQUJ690648' &gt; 'NAPA_InterchangeProduct_001' isn't valid (IllegalLOVValue: 979 for LOV: com.stibo.core.domain.impl.ListOfValuesImpl: NAPA_InterchangeComment).</p>
        <h3>TecDoc Standard</h3>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2813 </MadCap:conditionalText>Corrected export format display in Export Manager</p>
        <p class="Body3">Previously, the TecDoc export format was not displaying in the Export Manager dropdown. This is now fixed.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note">PRODOC note: MEDU RDUCST-2802 </MadCap:conditionalText>Corrected Supplier Importer  'context' method</p>
        <p class="Body3">Previously, when the 'Delta calculation method' parameter in TecDoc Supplier import workflow was set to 'context,' and an import was run with data that should no longer be active, the DeleteStatus change flag was not populated. Now the importer will properly update the DeleteStatus attribute to 'true.'</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2409 </MadCap:conditionalText>Corrected TAF stacktrace error when files are missing in the supplier import file  </p>
        <p class="Body3">Previously, the following files were missing in the supplier package: 216, 225, and 226. This would cause a stacktrace error to occur during conversion. These tables have now been removed from validation, therefore the validation state no longer displays the 'TAF file(s) are missing in supplier package: 216, 225, 226' message.</p>
        <p class="Body3">Additionally, when the supplier data did not contain the 403 table, an Error displayed within the Import Details screen. The error message was  'TAF File(s) are missing in supplier package: 403.' Now the import process overview status and the Import Details screen display more user-friendly text, as shown in the screenshot below. </p>
        <p class="Image3">
            <img src="../../Resources/Images/MPNotes/403.png" />
        </p>
        <p MadCap:conditions="Primary.Print">&#160;</p>
        <p MadCap:conditions="Primary.Print" class="Body1">&#160;</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2686 </MadCap:conditionalText>Improved Reference and Supplier Importer handling of digital assets</p>
        <p class="Body3">Previously, the TecDoc asset placeholder created by Supplier importer did not have a STEP Name and the importer could not find the asset to replace the content. Since the importer expected the asset's extension field to be mandatory, this caused an unnecessary conversion error regarding asset creation to occur. Now the importer properly creates the STEP Name, and error handling has been added for the importer's digital assets so that when an asset does not exist in a reference file, the asset is no longer imported, and a helpful error message will display in the background process details. In the example below, the new error message is displayed within the 'Text' column of the background process details screen.</p>
        <p class="Image3">
            <img src="../../Resources/Images/MPNotes/TD Error handling Assets.png" />
        </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2690</MadCap:conditionalText>Corrected import failure that occurred when the same file was imported more than once  </p>
        <p class="Body3">Previously, when the same file containing LOVs was imported more than once, the subsequent imports would fail. This has been corrected by adding the correct end tags for LOVs.</p>
        <p class="Body3"><b>Existing Implementations</b>: Additional steps are not necessary unless your previous delta calculation file is in a failed state. If this is the case, prior to importing, remove the delta files from the StepXMLDeltaCalculationService folder, as well as the ImportingFlowImportService folder on the STEP application server.</p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: RDCUST-2709</MadCap:conditionalText>Corrected Reference data importer to no longer duplicate Language Dimension points  </p>
        <p class="Body3">Previously, when TecDoc Reference import files contained different ID and Name values for the same Language Number, the TecDoc Reference Data Importer would create a new language context. </p>
        <p class="Body3">In the example provided below, three Reference Data import files, each containing the Language Number 004 with three different ID and Name values, have been imported. Because each import file contained different ID and Name values for their occurrence of Language Number 004, three different Dimension points were created: en, English, English (GB).</p>
        <p class="Image1" MadCap:conditions="Primary.Print">
            <img src="../../Resources/Images/MPNotes/Duplicated Language Number.png" />
        </p>
        <p class="Image3" MadCap:conditions="Primary.Web">
            <img src="../../Resources/Images/MPNotes/Duplicated Language Number.png" />
        </p>
        <p class="Body3">Now the importer will do the following:</p>
        <ul>
            <li class="Bullet3">If the Language Number value does not  exist in STEP, then create a new Language Dimension point.</li>
            <li class="Bullet3">If the Language Number value does exist in STEP, and all data is the same as in the imported file, then do nothing. </li>
            <li class="Bullet3">If the Language Number value does exist in STEP, and metadata is different in the imported file compared to STEP, then update the metadata in the existing Language Dimension point.</li>
        </ul>
        <p class="Body3"><b>Existing Implementations</b>: Additional steps are not necessary unless your import fails after update. If your Reference Data Importer fails during conversion, please do the following:</p>
        <ol>
            <li class="Bullet3">Delete all Language dimension points.</li>
            <li class="Bullet3">Delete the Language Dimension LOV.</li>
            <li class="Bullet3">Delete all files on the STEP application server in /workarea/background-processarea/TAFValidationService.</li>
            <li class="Bullet3">Delete all files on the STEP application server in /workarea/background-processarea/TAFToStepXMLConvertService.</li>
            <li class="Bullet3"> Delete all files on the STEP application server in /workarea/background-processarea/StepXMLDeltaCalculationService.</li>
            <li class="Bullet3">Delete all files on the STEP application server in /workarea/background-processarea/ImportingFlowImportService.</li>
            <li class="Bullet3">Delete all files on the STEP application server in /upload/hotfolders/TecDocReferenceInputFolder/save.</li>
            <li class="Bullet3">Use 'Force Delete &amp; Purge' on  all controller entities in workbench under Import Flow Root &gt; TecDoc Reference.</li>
            <li class="Bullet3">Run step 1 of TecDoc easy setup to create the TD_ATTR_BezNr attribute.</li>
        </ol>
        <h2 class="MPNDocumentation">Documentation Updates</h2>
        <p class="Body3">Enhancement of the PMDM for Automotive online help documentation is continuous, and updates are released with each maintenance patch. When these updates are significant and/or include high-level content reorganizations, they are communicated within the patch notes.</p>
        <p class="MPNHeadNoTOC">Downloadable Documentation now available for Automotive</p>
        <p class="Body3">Users can now easily access the latest Downloadable PDF version of the Automotive Quick Start Guide and the Automotive Reference Guide. These can be found within Online Help &gt; Downloadable Documentation.</p>
        <p class="Image3">
            <img src="../../Resources/Images/MPNotes/DD.png" />
        </p>
        <p class="MPNHeadNoTOC">All Automotive Release Notes and Maintenance Patch Notes now available in the online help</p>
        <p class="Body3">Users can now easily search for and view the content available within all of the Automotive Release and Maintenance Patch Notes. Additionally, the content is now searchable. In other words, when the online help search feature is used, and content within the Release and Maintenance Patch Notes matches the search criteria, the content will now display within the search results.</p>
        <p class="Body3">To view these within online help, navigate to the Automotive Solution Enablement section and expand the Release and Patch Notes for PMDM for Automotive section (or search for 'Automotive Notes').</p>
        <p class="Image3">
            <img src="../../Resources/Images/MPNotes/OLH.png" />
        </p>
        <p class="MPNHeadNoTOC">
            <MadCap:conditionalText MadCap:conditions="Primary.PRODOC Note" style="color: #4b0082;">PRODOC note: MEDU RDCUST-2769 </MadCap:conditionalText>Documentation for changing application names during import now complete</p>
        <p class="Body3">Application names can be automatically changed during import using a JavaScript within a business action that is added to the Import State of a workflow. Our documentation has been updated with detailed steps on how to do this, including two usable examples of JavaScript. </p>
        <p class="Body3">A new topic titled <b>8. Specify Application Naming </b><b>Convention</b> has been added<MadCap:xref href="../../Quick Start Guide/Admin QSG/8. Specify an Application Naming Convention.htm" class="HereWithParens" MadCap:conditions="Primary.Web"> (<span style="color: Blue;" class="mcFormatColor">here</span>)</MadCap:xref> to the <b>Automotive Quick Start Guide</b> to provide instructions on how to implement this change. </p>
        <p class="MPNHeadNoTOC" MadCap:conditions="Primary.Under Construction">ID Structures in Importers</p>
        <p class="Body3" MadCap:conditions="Primary.Under Construction">The purpose of the ID Structures in Importers topic is to help users better understand the required ID structures for the importers and other components within the Automotive solution to function properly. Please make sure you review the latest version of this, and have implemented the most up to date ID Structures. For more information, see the ID Structures in Importers topic within the . </p>
        <p class="MPNHeadNoTOC" MadCap:conditions="Primary.Under Construction">Terminology</p>
        <p class="Body3" MadCap:conditions="Primary.Under Construction">The purpose of the Terminology topic is to help users better understand the language and labels used within the Automotive Solution. The Terminology topic can now be found within the XXX. </p>
        <h2 class="MPNDownload">Patch recipe</h2>
        <p class="Body3">The Automotive add-on can be installed with the following recipe:</p>
        <p class="Body3"><b>to:automotive/7.0/automotive-7.0.8.spr</b>
        </p>
        <p class="note2" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The above recipe is compatible only with the STEP 8.3 MP2 baseline (to:step/trailblazer/step-8.3-mp2.spr).</p>
        <p class="Body3">For assistance in applying the patch to systems with extensions or additional add-on components, contact Stibo Systems Technical Services.</p>
    </body>
</html>