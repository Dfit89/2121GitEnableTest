<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Primary.Done">
    <head><title>[%=Heading.AnyLevel%]</title>
        <meta name="description" content="Automotive Solution:  Describes how options on applications are stored within Workbench in relation to the Automotive Validation Paths concept." />
    </head>
    <body>
        <h1>Options on Applications</h1>
        <p class="Body1">On an application, an attribute or reference exists to model each data point in a valid configuration. For the <b>Vehicle To Body Style Config</b> reference type an attribute for <b>Body Num Doors</b> and <b>Body Type</b> exists (similar to  the configuration classification object shown above). </p>
        <p class="Body1">In the workbench example below, the dropdown for the <b>Body Type</b> attribute displays all the available body types that can be chosen for the selected application. </p>
        <p class="Image2">
            <img src="../../../Resources/Images/QS/BodyTypeOptions.png">
            </img>
        </p>
        <p>Though the workbench could be used to select any one of the available options, this would be done without the safeguarding of the intelligent automotive validation path functionality, and therefore is not recommended. Applications are not intended to be created nor edited in the workbench. Instead, a robust results table and value editor are provided within an Application Manager Web UI screen. </p>
        <p class="Body1">Within a Web UI Value editor, users can view and select only the valid options for the vehicle they are working with. In the example below, the Application Manager results table 'Value editor' is displayed for the <b>1996 Dodge </b><b>Viper</b> Base Vehicle, and only the <b>Convertible</b> and <b>Coupe</b> options display for selection in the dropdown. </p>
        <p class="Image2">
            <img src="../../../Resources/Images/QS/DodgeViperBodyTypeWebUI.png">
            </img>
        </p>
        <p class="Body1">When an application is created, validation paths are available for conditions / options   stored as either attributes or references. However, each has its own configuration, as described below.</p>
        <h2>Options / Conditions Stored as Attributes</h2>
        <p class="Body1">When the data model uses an attribute to store the vehicle option / criteria, the automotive validation path data is managed as described below.</p>
        <p class="Body1">Easy Setup creates an Automotive Validation Path attribute (AutomotiveValidationPath). This attribute is made valid as metadata on the attribute basic object type, making it available for population on any attribute.</p>
        <p class="Image2">
            <img src="../../../Resources/Images/QS/AttValidationPath.png">
            </img>
        </p>
        <p class="Body1">Regardless of the model / standard you are working in, the system always evaluates the automotive validation path by beginning with the Base Vehicle / assembly object used in application records. </p>
        <p class="Body1">In the example above, the automotive validation path data within the data model is determined by:</p>
        <ol>
            <li class="Numbered1">Identifying the application and following the ACES Application To Base Vehicle reference (AC_ACESApplicationToBaseVehicle) to the Base Vehicle.</li>
            <li class="Numbered1">Examining all vehicle children of the Base Vehicle.</li>
            <li class="Numbered1">Following the Vehicle To Body Style Config (AC_VehicleToBodyStyleConfig) reference on the vehicle to the Body Style Config target object.</li>
            <li class="Numbered1">Evaluating the value of the VCdb Body Num Doors attribute (AC_VCdbBodyNumDoors) on that target object. </li>
        </ol>
        <p class="Body1HeadNoTOC">Syntax</p>
        <p class="Body1">The syntax of the automotive validation path is a series of commands, each separated by a period (.). Using the child, reference, ID (shown below), and attribute elements (including IDs of the applicable references and attributes to be followed), an automotive validation path can be applied to any attribute for which the data is modeled in STEP. When the vehicle option is modeled using an attribute, the final element of the syntax should always be an attribute where the value should be retrieved.</p>
        <MadCap:snippetBlock src="../../../Resources/Snippets/Validation Path Delete.flsnp" />
        <h2>Options / Conditions Stored as References</h2>
        <p class="Body1">When the data model uses a reference to store the vehicle option / criteria, the automotive validation path data is managed as described below.</p>
        <p class="Body1">The Automotive Validation Path attribute described in the previous section is still relevant. When created by Easy Setup, the attribute is made valid on the Reference Type basic object type (in addition to the attribute basic object type). Thus, the Automotive Validation Path attribute can then be populated on any reference. </p>
        <p class="Image3">
            <img src="../../../Resources/Images/QS/ReferenceValidationPath.png">
            </img>
        </p>
        <p class="Body1">In the example above, the automotive validation path data within the data model is determined by:</p>
        <ol>
            <li class="Numbered1"> Identifying the application and following the ACES Application To Base Vehicle reference (AC_ACESApplicationToBaseVehicle) to the Base Vehicle.</li>
            <li class="Numbered1">Examining all vehicle children of the Base Vehicle.</li>
            <li class="Numbered1">Following the Vehicle To Engine Config reference (AC_VehicleToEngineConfig) on the vehicle to the Engine Config target object.</li>
            <li class="Numbered1"> Following the Engine Config To Engine Base reference (AC_EngineConfigToEngineBase) from the Engine Config Object (which are now considered sources of the Engine Config To Engine Base reference) to the Engine Base target object.</li>
            <li class="Numbered1">Retrieving the STEP Name of the Engine Base object to be displayed in Application Manager. </li>
        </ol>
        <p class="Body1HeadNoTOC">Syntax</p>
        <p class="Body1">The syntax of the automotive validation path is a series of commands, each separated by a period (.). Using the child, reference, ID, and attribute elements (including IDs of the applicable references and attributes to be followed), an automotive validation path can be applied to any reference for which the data is modeled in STEP. When the vehicle option is modeled using a reference, the final element of the syntax should always be an ID of the reference where the STEP Name should be displayed.</p>
    </body>
</html>